diff --git a/client/factory.go b/client/factory.go
index 290d0cb..b8eb08b 100644
--- a/client/factory.go
+++ b/client/factory.go
@@ -12,7 +12,7 @@ import (
 	"strings"
 	"time"
 
-	"github.com/gogo/status"
+	"google.golang.org/grpc/status"
 	"github.com/temporalio/cli/common"
 	"github.com/temporalio/cli/headersprovider"
 	"github.com/urfave/cli/v2"
diff --git a/common/util.go b/common/util.go
index a27ae6f..1d400de 100644
--- a/common/util.go
+++ b/common/util.go
@@ -16,7 +16,6 @@ import (
 	"time"
 
 	"github.com/fatih/color"
-	"github.com/gogo/protobuf/proto"
 	"github.com/temporalio/cli/headers"
 	tColor "github.com/temporalio/tctl-kit/pkg/color"
 	"github.com/urfave/cli/v2"
@@ -25,6 +24,7 @@ import (
 	historypb "go.temporal.io/api/history/v1"
 	"go.temporal.io/server/common/codec"
 	"go.temporal.io/server/common/payloads"
+	"google.golang.org/protobuf/proto"
 )
 
 // ColorEvent takes an event and return string with color
diff --git a/namespace/namespace_commands.go b/namespace/namespace_commands.go
index 985e5e3..cde2e93 100644
--- a/namespace/namespace_commands.go
+++ b/namespace/namespace_commands.go
@@ -16,6 +16,7 @@ import (
 	"go.temporal.io/api/serviceerror"
 	"go.temporal.io/api/workflowservice/v1"
 	"go.temporal.io/server/common/primitives/timestamp"
+	"google.golang.org/protobuf/types/known/durationpb"
 )
 
 // createNamespace register a namespace
@@ -87,7 +88,7 @@ func createNamespace(c *cli.Context) error {
 		Description:                      description,
 		OwnerEmail:                       ownerEmail,
 		Data:                             data,
-		WorkflowExecutionRetentionPeriod: &retention,
+		WorkflowExecutionRetentionPeriod: durationpb.New(retention),
 		Clusters:                         clusters,
 		ActiveClusterName:                activeCluster,
 		HistoryArchivalState:             archState,
@@ -205,7 +206,7 @@ func UpdateNamespace(c *cli.Context) error {
 			return err
 		}
 		updateConfig := &namespacepb.NamespaceConfig{
-			WorkflowExecutionRetentionTtl: &retention,
+			WorkflowExecutionRetentionTtl: durationpb.New(retention),
 			HistoryArchivalState:          archState,
 			HistoryArchivalUri:            c.String(common.FlagHistoryArchivalURI),
 			VisibilityArchivalState:       archVisState,
diff --git a/schedule/schedule_commands.go b/schedule/schedule_commands.go
index a50b594..2e71219 100644
--- a/schedule/schedule_commands.go
+++ b/schedule/schedule_commands.go
@@ -24,6 +24,7 @@ import (
 	"go.temporal.io/sdk/converter"
 	"go.temporal.io/server/common/collection"
 	"go.temporal.io/server/common/primitives/timestamp"
+	"google.golang.org/protobuf/types/known/durationpb"
 )
 
 func scheduleBaseArgs(c *cli.Context) (
@@ -67,7 +68,7 @@ func buildIntervalSpec(s string) (*schedpb.IntervalSpec, error) {
 	if interval, err = timestamp.ParseDuration(parts[0]); err != nil {
 		return nil, err
 	}
-	return &schedpb.IntervalSpec{Interval: &interval, Phase: &phase}, nil
+	return &schedpb.IntervalSpec{Interval: durationpb.New(interval), Phase: durationpb.New(phase)}, nil
 }
 
 func buildScheduleSpec(c *cli.Context) (*schedpb.ScheduleSpec, error) {
@@ -468,12 +469,15 @@ func DescribeSchedule(c *cli.Context) error {
 	item.State = s.State
 	item.Info = i
 	if fas := i.FutureActionTimes; len(fas) > 0 {
-		item.NextRunTime = fas[0]
+		tmpNextRunTime := fas[0].AsTime()
+		item.NextRunTime = &tmpNextRunTime
 	}
 	if ras := i.RecentActions; len(ras) > 0 {
 		ra := ras[len(ras)-1]
-		item.LastRunTime = ra.ScheduleTime
-		item.LastRunActualTime = ra.ActualTime
+		tmpScheduleTime := ra.ScheduleTime.AsTime()
+		tmpActualTime := ra.ActualTime.AsTime()
+		item.LastRunTime = &tmpScheduleTime
+		item.LastRunActualTime = &tmpActualTime
 		item.LastRunExecution = ra.StartWorkflowResult
 	}
 	if fields := resp.Memo.GetFields(); len(fields) > 0 {
@@ -589,12 +593,15 @@ func ListSchedules(c *cli.Context) error {
 			item.State.Paused = info.GetPaused()
 			item.State.Notes = info.GetNotes()
 			if fas := info.GetFutureActionTimes(); len(fas) > 0 {
-				item.Info.NextRunTime = fas[0]
+				tmpNextRunTime := fas[0].AsTime()
+				item.Info.NextRunTime = &tmpNextRunTime
 			}
 			if ras := info.GetRecentActions(); len(ras) > 0 {
 				ra := ras[len(ras)-1]
-				item.Info.LastRunTime = ra.ScheduleTime
-				item.Info.LastRunActualTime = ra.ActualTime
+				tmpScheduleTime := ra.ScheduleTime.AsTime()
+				tmpActualTime := ra.ActualTime.AsTime()
+				item.Info.LastRunTime = &tmpScheduleTime
+				item.Info.LastRunActualTime = &tmpActualTime
 				item.Info.LastRunExecution = ra.StartWorkflowResult
 			}
 			item.Specification = info.GetSpec()
diff --git a/tests/namespace_test.go b/tests/namespace_test.go
index 1446b13..24b35bc 100644
--- a/tests/namespace_test.go
+++ b/tests/namespace_test.go
@@ -6,6 +6,7 @@ import (
 	"time"
 
 	"go.temporal.io/api/workflowservice/v1"
+	"google.golang.org/protobuf/types/known/durationpb"
 )
 
 func (s *e2eSuite) TestNamespaceUpdate_Verbose() {
@@ -26,7 +27,7 @@ func (s *e2eSuite) TestNamespaceUpdate_Verbose() {
 			Namespace:                        nsName,
 			Description:                      "description test",
 			OwnerEmail:                       "email@test",
-			WorkflowExecutionRetentionPeriod: &retentionBefore,
+			WorkflowExecutionRetentionPeriod: durationpb.New(retentionBefore),
 		},
 	)
 	s.NoError(err)
@@ -47,7 +48,7 @@ func (s *e2eSuite) TestNamespaceUpdate_Verbose() {
 	s.NoError(err)
 	s.Equal("description after", nsAfter.GetNamespaceInfo().GetDescription())
 	s.Equal("email@after", nsAfter.GetNamespaceInfo().GetOwnerEmail())
-	s.Equal(float64(48*60*60), nsAfter.GetConfig().GetWorkflowExecutionRetentionTtl().Seconds())
+	s.Equal(float64(48*60*60), nsAfter.GetConfig().GetWorkflowExecutionRetentionTtl())
 }
 
 func (s *e2eSuite) TestNamespaceUpdate_NonVerbose() {
@@ -68,7 +69,7 @@ func (s *e2eSuite) TestNamespaceUpdate_NonVerbose() {
 			Namespace:                        nsName,
 			Description:                      "description test",
 			OwnerEmail:                       "email@test",
-			WorkflowExecutionRetentionPeriod: &retentionBefore,
+			WorkflowExecutionRetentionPeriod: durationpb.New(retentionBefore),
 		},
 	)
 	s.NoError(err)
@@ -89,7 +90,7 @@ func (s *e2eSuite) TestNamespaceUpdate_NonVerbose() {
 	s.NoError(err)
 	s.Equal("description after", nsAfter.GetNamespaceInfo().GetDescription())
 	s.Equal("email@after", nsAfter.GetNamespaceInfo().GetOwnerEmail())
-	s.Equal(float64(48*60*60), nsAfter.GetConfig().GetWorkflowExecutionRetentionTtl().Seconds())
+	s.Equal(float64(48*60*60), nsAfter.GetConfig().GetWorkflowExecutionRetentionTtl())
 }
 
 func (s *e2eSuite) TestNamespaceUpdate_Data() {
diff --git a/trace/execution_state.go b/trace/execution_state.go
index 0e86e9b..504a4bf 100644
--- a/trace/execution_state.go
+++ b/trace/execution_state.go
@@ -26,13 +26,14 @@ package trace
 
 import (
 	"fmt"
+	"strconv"
+	"sync"
+	"time"
+
 	"go.temporal.io/api/common/v1"
 	"go.temporal.io/api/enums/v1"
 	"go.temporal.io/api/failure/v1"
 	"go.temporal.io/api/history/v1"
-	"strconv"
-	"sync"
-	"time"
 )
 
 // ExecutionState provides a common interface to any execution (Workflows, Activities and Timers in this case) updated through HistoryEvents.
@@ -243,7 +244,8 @@ func (state *WorkflowExecutionState) Update(event *history.HistoryEvent) {
 		state.Status = enums.WORKFLOW_EXECUTION_STATUS_RUNNING
 
 		attrs := event.GetWorkflowExecutionStartedEventAttributes()
-		state.StartTime = event.EventTime
+		tmpStartTime := event.EventTime.AsTime()
+		state.StartTime = &tmpStartTime
 		state.Attempt = attrs.GetAttempt()
 		state.Type = attrs.GetWorkflowType()
 		if state.Execution.GetRunId() == "" {
@@ -258,7 +260,8 @@ func (state *WorkflowExecutionState) Update(event *history.HistoryEvent) {
 		state.Termination = nil
 
 		// Get timeout and max retry info
-		state.WorkflowExecutionTimeout = attrs.WorkflowExecutionTimeout
+		tmpWorkflowExecutionTimeout := attrs.WorkflowExecutionTimeout.AsDuration()
+		state.WorkflowExecutionTimeout = &tmpWorkflowExecutionTimeout
 		if attrs.RetryPolicy != nil {
 			state.MaximumAttempts = attrs.RetryPolicy.MaximumAttempts
 		} else {
@@ -267,7 +270,8 @@ func (state *WorkflowExecutionState) Update(event *history.HistoryEvent) {
 
 	case enums.EVENT_TYPE_WORKFLOW_EXECUTION_COMPLETED:
 		state.Status = enums.WORKFLOW_EXECUTION_STATUS_COMPLETED
-		state.CloseTime = event.EventTime
+		tmpEventTime := event.EventTime.AsTime()
+		state.CloseTime = &tmpEventTime
 
 	case enums.EVENT_TYPE_WORKFLOW_EXECUTION_FAILED:
 		state.Status = enums.WORKFLOW_EXECUTION_STATUS_FAILED
@@ -275,28 +279,33 @@ func (state *WorkflowExecutionState) Update(event *history.HistoryEvent) {
 		attrs := event.GetWorkflowExecutionFailedEventAttributes()
 		state.Failure = attrs.GetFailure()
 		state.RetryState = attrs.GetRetryState()
-		state.CloseTime = event.EventTime
+		tmpEventTime := event.EventTime.AsTime()
+		state.CloseTime = &tmpEventTime
 
 	case enums.EVENT_TYPE_WORKFLOW_EXECUTION_TERMINATED:
 		state.Status = enums.WORKFLOW_EXECUTION_STATUS_TERMINATED
 		state.Termination = event.GetWorkflowExecutionTerminatedEventAttributes()
-		state.CloseTime = event.EventTime
+		tmpEventTime := event.EventTime.AsTime()
+		state.CloseTime = &tmpEventTime
 
 	case enums.EVENT_TYPE_WORKFLOW_EXECUTION_CANCEL_REQUESTED:
 		state.CancelRequest = event.GetWorkflowExecutionCancelRequestedEventAttributes()
 
 	case enums.EVENT_TYPE_WORKFLOW_EXECUTION_CANCELED:
 		state.Status = enums.WORKFLOW_EXECUTION_STATUS_CANCELED
-		state.CloseTime = event.EventTime
+		tmpEventTime := event.EventTime.AsTime()
+		state.CloseTime = &tmpEventTime
 
 	case enums.EVENT_TYPE_WORKFLOW_EXECUTION_CONTINUED_AS_NEW:
 		state.Status = enums.WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW
-		state.CloseTime = event.EventTime
+		tmpEventTime := event.EventTime.AsTime()
+		state.CloseTime = &tmpEventTime
 
 	case enums.EVENT_TYPE_WORKFLOW_EXECUTION_TIMED_OUT:
 		attrs := event.GetWorkflowExecutionTimedOutEventAttributes()
 		state.Status = enums.WORKFLOW_EXECUTION_STATUS_TIMED_OUT
-		state.CloseTime = event.EventTime
+		tmpEventTime := event.EventTime.AsTime()
+		state.CloseTime = &tmpEventTime
 		state.RetryState = attrs.GetRetryState()
 
 	// ACTIVITY EVENTS
@@ -332,7 +341,8 @@ func (state *WorkflowExecutionState) Update(event *history.HistoryEvent) {
 			child.Status = enums.WORKFLOW_EXECUTION_STATUS_RUNNING
 			child.Execution = attrs.GetWorkflowExecution()
 			if child.StartTime == nil {
-				child.StartTime = event.EventTime
+				tmpEventTime := event.EventTime.AsTime()
+				child.StartTime = &tmpEventTime
 			}
 		}
 	case enums.EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_COMPLETED:
@@ -340,7 +350,8 @@ func (state *WorkflowExecutionState) Update(event *history.HistoryEvent) {
 		if child, ok := state.GetChildWorkflowByEventId(attrs.InitiatedEventId); ok {
 			child.Status = enums.WORKFLOW_EXECUTION_STATUS_COMPLETED
 			if child.CloseTime == nil {
-				child.CloseTime = event.EventTime
+				tmpEventTime := event.EventTime.AsTime()
+				child.CloseTime = &tmpEventTime
 			}
 		}
 	case enums.EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_FAILED:
@@ -350,7 +361,8 @@ func (state *WorkflowExecutionState) Update(event *history.HistoryEvent) {
 			child.Failure = attrs.GetFailure()
 			child.RetryState = attrs.GetRetryState()
 			if child.CloseTime == nil {
-				child.CloseTime = event.EventTime
+				tmpEventTime := event.EventTime.AsTime()
+				child.CloseTime = &tmpEventTime
 			}
 		}
 	case enums.EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TERMINATED:
@@ -359,7 +371,8 @@ func (state *WorkflowExecutionState) Update(event *history.HistoryEvent) {
 		if child, ok := state.GetChildWorkflowByEventId(attrs.InitiatedEventId); ok {
 			child.Status = enums.WORKFLOW_EXECUTION_STATUS_TERMINATED
 			if child.CloseTime == nil {
-				child.CloseTime = event.EventTime
+				tmpEventTime := event.EventTime.AsTime()
+				child.CloseTime = &tmpEventTime
 			}
 		}
 	case enums.EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_CANCELED:
@@ -367,7 +380,8 @@ func (state *WorkflowExecutionState) Update(event *history.HistoryEvent) {
 		if child, ok := state.GetChildWorkflowByEventId(attrs.InitiatedEventId); ok {
 			child.Status = enums.WORKFLOW_EXECUTION_STATUS_CANCELED
 			if child.CloseTime == nil {
-				child.CloseTime = event.EventTime
+				tmpEventTime := event.EventTime.AsTime()
+				child.CloseTime = &tmpEventTime
 			}
 		}
 	case enums.EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TIMED_OUT:
@@ -375,7 +389,8 @@ func (state *WorkflowExecutionState) Update(event *history.HistoryEvent) {
 		if child, ok := state.GetChildWorkflowByEventId(attrs.InitiatedEventId); ok {
 			child.Status = enums.WORKFLOW_EXECUTION_STATUS_TIMED_OUT
 			if child.CloseTime == nil {
-				child.CloseTime = event.EventTime
+				tmpEventTime := event.EventTime.AsTime()
+				child.CloseTime = &tmpEventTime
 			}
 		}
 
@@ -491,7 +506,8 @@ func (state *ActivityExecutionState) Update(event *history.HistoryEvent) {
 		state.Attempt = attrs.GetAttempt()
 
 		// This is the best guess we have for when the activity was started
-		state.StartTime = event.EventTime
+		tmpEventTime := event.EventTime.AsTime()
+		state.StartTime = &tmpEventTime
 
 		// Clear failures
 		state.Failure = nil
@@ -502,18 +518,21 @@ func (state *ActivityExecutionState) Update(event *history.HistoryEvent) {
 		attrs := event.GetActivityTaskFailedEventAttributes()
 		state.Failure = attrs.GetFailure()
 		state.RetryState = attrs.GetRetryState()
-		state.CloseTime = event.EventTime
+		tmpEventTime := event.EventTime.AsTime()
+		state.CloseTime = &tmpEventTime
 
 	case enums.EVENT_TYPE_ACTIVITY_TASK_COMPLETED:
 		state.Status = ACTIVITY_EXECUTION_STATUS_COMPLETED
-		state.CloseTime = event.EventTime
+		tmpEventTime := event.EventTime.AsTime()
+		state.CloseTime = &tmpEventTime
 
 	case enums.EVENT_TYPE_ACTIVITY_TASK_CANCEL_REQUESTED:
 		state.Status = ACTIVITY_EXECUTION_STATUS_CANCEL_REQUESTED
 
 	case enums.EVENT_TYPE_ACTIVITY_TASK_CANCELED:
 		state.Status = ACTIVITY_EXECUTION_STATUS_CANCELED
-		state.CloseTime = event.EventTime
+		tmpEventTime := event.EventTime.AsTime()
+		state.CloseTime = &tmpEventTime
 
 	case enums.EVENT_TYPE_ACTIVITY_TASK_TIMED_OUT:
 		state.Status = ACTIVITY_EXECUTION_STATUS_TIMED_OUT
@@ -521,7 +540,8 @@ func (state *ActivityExecutionState) Update(event *history.HistoryEvent) {
 		attrs := event.GetActivityTaskTimedOutEventAttributes()
 		state.Failure = attrs.GetFailure()
 		state.RetryState = attrs.GetRetryState()
-		state.CloseTime = event.EventTime
+		tmpEventTime := event.EventTime.AsTime()
+		state.CloseTime = &tmpEventTime
 	}
 }
 
@@ -556,7 +576,8 @@ func (t *TimerExecutionState) Update(event *history.HistoryEvent) {
 	case enums.EVENT_TYPE_TIMER_STARTED:
 		attrs := event.GetTimerStartedEventAttributes()
 
-		t.StartToFireTimeout = attrs.StartToFireTimeout
+		tmpStartToFireTimeout := attrs.StartToFireTimeout.AsDuration()
+		t.StartToFireTimeout = &tmpStartToFireTimeout
 		t.TimerId = attrs.TimerId
 		if attrs.TimerId != strconv.FormatInt(event.EventId, 10) {
 			// If the user has set a custom id, we can use it for the name
@@ -565,13 +586,16 @@ func (t *TimerExecutionState) Update(event *history.HistoryEvent) {
 			t.Name = fmt.Sprintf("Timer (%s)", t.StartToFireTimeout.String())
 		}
 		t.Status = TIMER_STATUS_WAITING
-		t.StartTime = event.EventTime
+		tmpEventTime := event.EventTime.AsTime()
+		t.StartTime = &tmpEventTime
 	case enums.EVENT_TYPE_TIMER_FIRED:
 		t.Status = TIMER_STATUS_FIRED
-		t.CloseTime = event.EventTime
+		tmpEventTime := event.EventTime.AsTime()
+		t.CloseTime = &tmpEventTime
 	case enums.EVENT_TYPE_TIMER_CANCELED:
 		t.Status = TIMER_STATUS_CANCELED
-		t.CloseTime = event.EventTime
+		tmpEventTime := event.EventTime.AsTime()
+		t.CloseTime = &tmpEventTime
 	}
 }
 
diff --git a/trace/execution_state_test.go b/trace/execution_state_test.go
index d860a38..2895f19 100644
--- a/trace/execution_state_test.go
+++ b/trace/execution_state_test.go
@@ -34,6 +34,7 @@ import (
 	"go.temporal.io/api/enums/v1"
 	"go.temporal.io/api/failure/v1"
 	"go.temporal.io/api/history/v1"
+	"google.golang.org/protobuf/types/known/durationpb"
 )
 
 var events = map[string]*history.HistoryEvent{
@@ -277,7 +278,7 @@ var events = map[string]*history.HistoryEvent{
 		Attributes: &history.HistoryEvent_TimerStartedEventAttributes{
 			TimerStartedEventAttributes: &history.TimerStartedEventAttributes{
 				TimerId:            "20", // If TimerId is not set it'll be the same as EventId
-				StartToFireTimeout: NewDuration(time.Hour),
+				StartToFireTimeout: durationpb.New(*NewDuration(time.Hour)),
 			},
 		},
 	},
